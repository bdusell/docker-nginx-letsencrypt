[supervisord]
user=root
# Do not write logs to a log file. Supervisord echoes all of its logs on stdout
# anyway.
logfile=/dev/null
logfile_maxbytes=0
loglevel=info
pidfile=/tmp/supervisord.pid
nodaemon=true

# This enables supervisord's XML-RPC interface. The XML-RPC interface is
# required so that the watchdog can query whether all processes are running
# when it starts.
# See http://supervisord.org/xmlrpc.html
[rpcinterface:supervisor]
supervisor.rpcinterface_factory=supervisor.rpcinterface:make_main_rpcinterface

# This defines the Unix socket where the XML-RPC interface will be accessed.
[unix_http_server]
file=/tmp/supervisord.sock

# Fake Nginx web server.
[program:nginx]
command=bash fake-server.bash
# Do not try to restart a crashed process; the watchdog should shut down
# supervisord in this case anyway.
autorestart=false
startretries=0
stopsignal=TERM
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stdout_logfile_backups=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
stderr_logfile_backups=0

# A cron daemon that is used to run the Certbot renewal script at regular
# intervals.
[program:cron]
command=/app/busybox_CROND -f -L /dev/stdout
autorestart=false
startretries=0
stopsignal=TERM
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stdout_logfile_backups=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
stderr_logfile_backups=0

# An event listener that automatically kills supervisord (and therefore the
# container) if any of the processes stop.
[eventlistener:watchdog]
command=python /app/watchdog.py
events=PROCESS_STATE_EXITED
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
stderr_logfile_backups=0
# This encourages supervisord to start the event listener before the other
# processes, although it does not wait for the event listener to enter the
# READY state. The event listener still needs to verify that all processes
# are running when it starts up.
priority=1
